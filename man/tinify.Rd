% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tinify.R
\name{tinify}
\alias{tinify}
\title{Shrink Image Files with TinyPNG}
\usage{
tinify(
  file,
  overwrite = FALSE,
  details = FALSE,
  return_path = NULL,
  resize = NULL,
  key = NULL
)
}
\arguments{
\item{file}{String, required. A string detailing the path to the file you wish to shrink,
relative to the current working directory or as an absolute file path. Can include sub-directories and
must include the file extension (.png or .jpg/.jpeg only).}

\item{overwrite}{Boolean, optional. By default, tinify will create a new file with the
suffix '_tiny' and preserve the original file. Set \code{TRUE} to instead overwrite
the original file, with the same filename.}

\item{details}{Boolean, optional. If \code{TRUE}, provides details on the amount of
shrinkage (\% and Kb), and the number of TinyPNG API calls made this month.}

\item{return_path}{String, optional. One of \code{rel}, \code{abs}, or \code{all}. If \code{rel}, will return the
file path of the newly tinified image file, relative to the current working directory.
If \code{abs}, will return the absolute file path of the newly tinified image file. If
\code{all}, will return a named list with both the absolute and relative file paths.}

\item{resize}{Named list, optional. A named list with the elements \code{method} as a string, and \code{width} and/or \code{height} as numerics.
Method must be set to one of "scale", "fit", "cover", or "thumb". If using "scale", you
only need to provide \code{width} OR \code{height}, not both. If using any other method, you must supply
both a \code{width} AND \code{height}. See \url{https://tinypng.com/developers/reference#resizing-images} and the examples for more.}

\item{key}{String, optional. A string containing your TinyPNG API key.
Not required if the API key is set using \code{tinify_api()}.
If an API key is provided with \code{tinify_api()}, any other key
provided in the function call will override the key set by \code{tinify_api()}.}
}
\value{
If \code{return_path = "rel"} or \code{return_path = "abs"}, a string with the absolute
or relative path to the newly tinified image file. If \code{return_path = "all"}, a named
list with both absolute and relative file paths included as \verb{$absolute} and \verb{$relative} respectively.
}
\description{
Shrink an image's (PNG or JPG) filesize with the TinyPNG API. Designed
to be quick and easy for basic use, but to provide all the extra options of the TinyPNG
API if required.
}
\details{
You can get a TinyPNG API key from \url{https://tinypng.com/developers}.

TinyPNG is smart enough to know when you are uploading the same file again,
and so will not count repeat calls of \code{tinify()} on the same image file against
your monthly API usage limit. This can be useful if, for example, you are using \code{tinify()}
in an RMarkdown document as it won't count against your API usage every time you knit your
document. But, be aware that use of \code{resize} also counts as an additional API call,
as the image is first reduced in filesize, then a second API call is made to resize
the newly tinified file.
}
\examples{
\dontrun{
# Shrink a PNG file

img <- system.file("extdata", "example.png", package = "tinieR")

tinify(img)

# Also works with JPEG/JPG files

img_jpg <- system.file("extdata", "example.jpg", package = "tinieR")

tinify(img_jpg)

# Return absolute path to newly shrunk file:

shrunk_img <- tinify(img, return_path = "abs")

# Show details:

tinify(img, details = TRUE)

# Overwrite original file in place:

tinify(img, overwrite = TRUE)

# Resize an image with the method "scale", only providing a width:

tinify(img, resize = list(method = "scale", width = 300))

# Or resize an image with any other method by providing both width and height:

tinify(img, resize = list(method = "cover", width = 300, height = 150))

# Overwrite a global API key set in tinify_api():

tinify(img, key = "NEW-API-KEY-HERE")

# You can combine any of the above:

tinify(img,
       overwrite = TRUE,
       details = TRUE,
       return_path = "rel")

# Plays nice with the pipe:

img \%>\% tinify()

# And with purrr::map for multiple files:

imgs <- c("example.png", "example2.png")

purrr::map(imgs, ~tinify(.x))

# An example method for shrinking an entire directory:

imgs_dir <- fs::dir_ls("imgs", glob = "*.png")

purrr::map(imgs_dir, ~tinify(.x, overwrite = TRUE))
}
}
\seealso{
\code{\link[=tinify_key]{tinify_key()}} to set an API key globally so it does not need to be provided with every call of \code{tinify()}
}
