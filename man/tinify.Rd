% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tinify.R
\name{tinify}
\alias{tinify}
\title{Shrink Image Files with TinyPNG}
\usage{
tinify(
  file,
  overwrite = FALSE,
  return_path = FALSE,
  details = FALSE,
  key = NULL
)
}
\arguments{
\item{file}{A string detailing the path to the file you wish to shrink,
relative to the current working directory. Can include sub-directories and
must include the file extension (.png or .jpg/.jpeg only).}

\item{overwrite}{Boolean. By default, tinify will create a new file with the
suffix '_tiny' and preserve the original file. Set \code{TRUE} to instead overwrite
the original file, with the same filename.}

\item{return_path}{Boolean. If TRUE, tinify returns the full absolute filepath to the
newly shrunk file as a string.}

\item{details}{Boolean. If TRUE, provides details on the amount of
shrinkage (\% and Kb), and the number of TinyPNG API calls made this month.}

\item{key}{Optional. A string containing your TinyPNG API key.
Not required if the API key is set using \code{tinify_api()}.
If an API key is provided with \code{tinify_api()}, any other key
provided in the function call will override the key set by \code{tinify_api()}.}
}
\value{
If \code{return_path = TRUE}, a string with the full absolute path to the newly shrunk image file.
}
\description{
Shrink an image's (PNG or JPG) filesize with the TinyPNG API.
}
\details{
You can get a TinyPNG API key from \url{https://tinypng.com/developers}.

TinyPNG is smart enough to know when you are uploading the same file again,
and so will not count repeat calls of \code{tinify()} on the same image file against
your monthly API usage limit. This can be useful if, for example, you are using \code{tinify()}
in an RMarkdown document as it won't count against your API usage every time you knit your
document.
}
\examples{
\dontrun{

tinify("example.png")

# Overwrite original file in place:

tinify("example.png", overwrite = TRUE)

# Return absolute path to newly shrunk file:

shrunk_img <- tinify("imgs/example.png", return_path = TRUE)

knitr::include_graphics(shrunk_img)

# Show details:

tinify("example.png", details = TRUE)

# Overwrite a global API key set in tinify_api():

tinify("example.png", key = "NEW-API-KEY-HERE")

# You can combine any number of the above:

tinify("example.png", overwrite = TRUE, details = TRUE, return_path = TRUE)

# Plays nice with the pipe:

img <- "example.png"

img \%>\% tinify()

# And with purrr::map for multiple files:

imgs <- c("example.png", "example2.png")

purrr::map(imgs, ~tinify(.x))

# An example method for shrinking an entire directory:

imgs_dir <- fs::dir_ls("imgs")

purrr::map(imgs_dir, ~tinify(.x, overwrite = TRUE))
}
}
\seealso{
\code{\link[=tinify_key]{tinify_key()}} to set an API key globally so it does not need to be provided with every call of \code{tinify()}
}
